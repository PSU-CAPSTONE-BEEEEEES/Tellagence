17:59:25       aren | here
17:59:58     @d-_-b | going to the bathroom real quick, feel free to start chatting.
18:00:23 jesusaurus | long thinks there might be a function we can call to remove the whitespace
18:00:51 jesusaurus | mysql has a function that would do it, so psql might have one too
18:01:43          * | blackcat is here
18:02:33   blackcat | jesusaurus: can you give me a username that have trailing whitespace in the xlsx file
18:03:23   blackcat | jesusaurus: https://twitter.com/signup
18:03:47   blackcat | username can not be 'abc def'
18:04:37       aren | there's a regex for this
18:04:55   blackcat | jesusaurus: I don't think I got your idea
18:05:12     @d-_-b | back
18:05:15       aren | @([A-Za-z0-9_]+)
18:05:32     @d-_-b | jesusaurus, why would we need to strip the whitespace? user error?
18:05:32   longuyen | here
18:05:38   blackcat | aren: I got that regex in my santize function
18:06:15          * | d-_-b still loves meetings with music, by the way
18:06:19   blackcat | d-_-b: people can't register a valid Twitter username with whitespace char in it
18:06:45     @d-_-b | blackcat, but say they search for one with trailing whitespace, is that what jesusaurus means?
18:07:22   longuyen | the trailing whitespace must have resulted from the excel file
18:07:34   blackcat | if they search for something in invalid format, we will return error: invalid username
18:07:45   longuyen | because I believe tweeter removes trailing whitespace from username for each registered user
18:08:17   longuyen | blackcat: that should not happen if we use suggestion box and only allow user to select valid name from suggestion
18:09:03   blackcat | yeah and I think there should be no change with our database structure, is it correct? <-- jesusaurus
18:09:14     @d-_-b | longuyen, blackcat, http://imgur.com/xmGNu
18:09:26     @d-_-b | i just tried that and it errored with trailing whitespace
18:10:39     @d-_-b | and we're agreeing that the suggestions are selectable, like the one aren looked at?
18:11:00   longuyen | blackcat: no I think trailing whitespaces are still in the db
18:11:09     @d-_-b | i feel like tab complete might be a good feature at some point, based on highlighting the first suggestion
18:11:12   longuyen | blackcat: you just need to run 1 single query to trim all the username
18:11:27   longuyen | in SQL it is UPDATE user SET username = trim(username)
18:11:47   longuyen | blackcat: DIY in postgre
18:12:16   longuyen | d-_-b: voted for tab complete
18:12:39     @d-_-b | we'll see what the library allows for. aren said it was a bit messy
18:14:00     @d-_-b | jesusaurus, did those recent pushes with hptran fix the json issues?
18:15:09       aren | d-_-b: the autocomplete is selectable with enter or tab and can be esaped with the ESC button
18:15:10 jesusaurus | blackcat: the whitespace is in the database
18:15:38     @d-_-b | aren, sick
18:15:38   blackcat | jesusaurus: how do we know that?
18:15:51 jesusaurus | the usernames were defined as char(50), which always has exactly 50 chars
18:16:00 jesusaurus | everything after the username is a space
18:16:34   blackcat | ok -> now I get your idea
18:16:35 jesusaurus | so we need to change the type to varchar(50) so that it can be less than 50 chars
18:16:44     @d-_-b | makes sense
18:16:56   blackcat | ok
18:17:27     @d-_-b | aren, is the autosuggest code on code.google or github?
18:18:05       aren | no...um its at : http://www.brandspankingnew.net/archive/2006/08/ajax_auto-suggest_auto-complete.html
18:18:34       aren | I also have it local on my machine, can push to our repo if you like
18:19:02     @d-_-b | aren, i got it from there, just curious if the source was viewable on github or something
18:20:01       aren | not that I've seen
18:20:38     @d-_-b | so as of now, we've moved officially to using the real data, correct?
18:20:55     @d-_-b | how are the issues with the big json requests?
18:21:25     @d-_-b | hptran, did you look into clustering coefficients at all?
18:21:26 jesusaurus | yeah
18:21:27       aren | auto comp code is in lib on interface now
18:21:33     @d-_-b | cool
18:21:46 jesusaurus | big json is no different from the fake data
18:21:58     @d-_-b | meaning 500s
18:22:16 jesusaurus | right now long and huy are working on using the degree, etc, to normalize the size of the nodes and links
18:22:20 jesusaurus | d-_-b: oh that
18:22:29 jesusaurus | that was php's 30 sec timeout
18:22:33 jesusaurus | i turned that off
18:22:53     @d-_-b | jesusaurus, have you tried requesting the entire data set?
18:22:53 jesusaurus | we no longer know that we will halt
18:23:15 jesusaurus | d-_-b: there are ~300 subgraphs, so we cant request the entire thing
18:23:18       aren | scary
18:23:30 jesusaurus | search.php is a depth-first search, so we can only get an entire subgraph
18:23:57     hptran | hi
18:24:15     @d-_-b | does that mean we might be able to move to a request per subgraph, with queries selecting different subgraphs
18:24:17     hptran | just work with Long, and Jon, and forgot
18:24:30     @d-_-b | hptran, hai
18:25:08   blackcat | 'hai' is how we sound 'hi' in VNese, too
18:25:15     @d-_-b | heh
18:25:28     hptran | really blackcat
18:25:44     @d-_-b | i can have the progress bar just spin on each request, giving the user different output for each.
18:26:02     @d-_-b | i have to, since i can't approximate the request time from js, can i?
18:26:11 jesusaurus | im currently requesting a depth of 10,000, we'll see how large this subgraph is and how long it takes
18:26:34     @d-_-b | fair enough
18:26:35 jesusaurus | d-_-b: correct
18:27:21     @d-_-b | i wonder if there is any way to send intermediate messages from the server side that i can catch and update the progress bar with
18:27:53 jesusaurus | Allowed memory size of 134217728 bytes exhausted
18:27:59 jesusaurus | running locally on my laptop :/
18:28:14     @d-_-b | yikes
18:28:27   blackcat | jesusaurus: which file? I will try to put it on my server
18:28:47 jesusaurus | search.php
18:28:53 jesusaurus | with ?depth=10000
18:29:09   blackcat | is it in dev?
18:29:22     @d-_-b | and that iterates down, so even if there isn't a depth of 10000, it'd stop before
18:30:11 jesusaurus | blackcat: yes
18:30:19     @d-_-b | hptran, did you look into clustering coefficients at all?
18:30:40 jesusaurus | yeah, if there are no unvisited nodes in the subgraph, it quits looking
18:30:52      BbBot | build #17 of Interface is complete: Success [build successful]  Build details are at http://capstone02.cs.pdx.edu/builders/Interface/builds
18:30:57     hptran | d-_-b: not really, but i almost finished my codes for finding subgraphs, for the clustering coefficients, I ask Nitin but he could not find
18:31:39     @d-_-b | hrm. is your code for finding subgraphs in matlab, then stored in the db?
18:31:49     hptran | d-_-b: in matlab
18:31:57     hptran | d-_-b: and then store in database
18:32:11     hptran | we have about 320 subgraphs
18:32:33     @d-_-b | that's more than i thought, for how many users again?
18:32:41     hptran | about 6000
18:32:53     @d-_-b | this will be great for a stats slide in our presentation by the way
18:33:05     hptran | yes, i think so
18:33:12 jesusaurus | my assumption is that there is 1 large subgraph and 319 subgraphs <= 20 nodes
18:33:24     hptran | yes
18:33:43     @d-_-b | 20 * 320 = 6400
18:33:55     hptran | if the maximum number of nodes in one subgraph is just about 500, then we don't care about clustering coefficient
18:34:23     @d-_-b | hptran, and i suppose that once we figure out the biggest subgraph, we can go from there?
18:34:36     hptran | yep
18:34:51     @d-_-b | aren, was the zoom slider issue due to stored variables like you thought?
18:34:56     @d-_-b | hptran, makes sense
18:35:11     hptran | actually, i have another way to do that, by using graph components, i will discuss it with sponsors next meeting
18:35:11     @d-_-b | so in terms of making it to the demo, how are folks feeling?
18:35:37     @d-_-b | hptran, we can email them now if it might affect the demo
18:35:49       aren | d-_-b: haven't pushed and tested the updated code
18:36:02     hptran | but the demo just need to show shortestpath with realdata, not subgraphs yet, right?
18:36:21   blackcat | jesusaurus: bad news. My server ran out of memory, too
18:36:22   blackcat | Allowed memory size of 134217728 bytes exhausted (tried to allocate 2
18:36:29   blackcat | http://ox.cs.pdx.edu/jon/search.php?depth=10000
18:36:54 jesusaurus | thats the same number
18:37:04     @d-_-b | well, to see all the real data we'd end up showing the subgraphs, right?
18:37:04 jesusaurus | there must be a limit in php we need to override
18:37:16     @d-_-b | aren, no worries, just curious if you did it in the meantime
18:37:19 jesusaurus | d-_-b: yeah
18:37:35   blackcat | jesusaurus:  ini_set('max_execution_time', 0);
18:37:36   blackcat | ini_set('memory_limit', '-1');
18:37:51       aren | seems like I fixed it
18:37:57       aren | http://web.cecs.pdx.edu/~aren/site/
18:38:08     @d-_-b | longuyen, how were you're ideas affecting the zoom/pan performance
18:39:05     @d-_-b | aren, i had it for awhile, then lost it for some reason
18:39:07 jesusaurus | longuyen: how about using one of these for the subgraphs: http://mbostock.github.com/d3/ex/voronoi.html
18:39:34   longuyen | d-_-b: my idea is removeing all links while zomming and drawing them back when there's no zoom. But if the browser is chrome and we don't have do that
18:39:54   longuyen | d-_-b: so there would be a brief handler within the redraw function
18:39:56       aren | d-_-b: ???
18:40:57      BbBot | build #13 of Render is complete: Success [build successful]  Build details are at http://capstone02.cs.pdx.edu/builders/Render/builds/13
18:40:59      BbBot | build #14 of Render is complete: Success [build successful]  Build details are at http://capstone02.cs.pdx.edu/builders/Render/builds/14
18:41:22     @d-_-b | aren, i think it may be happening when i click onto a different part of the track, off the toggle. it gets the scale skewed a bit.
18:41:42       aren | I'll keep fiddling with it
18:42:19     @d-_-b | aren, yeah, if i slide a few clicks left, then a few right, and so on, the steps of zoom seem to increase.
18:42:32     @d-_-b | longuyen, that makes sense.
18:42:52     @d-_-b | longuyen, have we tried safari? it's very similar to chrome
18:43:01     @d-_-b | firefox is the oddball
18:43:46   longuyen | d-_-b: I tried with Safari on my iPhone and it's slow as how it was on firefox
18:44:14     @d-_-b | longuyen, hrm, that was your iphone though. but still.
18:45:01     @d-_-b | were we going to unstyle the links that are just for the shortest path algorithm? it seems like every node is connected to every other node
18:45:39   blackcat | jesusaurus: I add those 2 lines in to search.php, there is no error in the log but the result didn't come up in the client browser
18:45:45          * | d-_-b can trigger the progress bar overlay on redraw tonight
18:45:57     @d-_-b | and do the spinning on request
18:46:42     @d-_-b | we still need to resize the 'rect' to 'inner' on zoom/pan so we can always click things
18:47:45     @d-_-b | is everyone clear what they need to do for friday? can we agree to a preliminary merge on dev thursday night?
18:47:57   longuyen | d-_-b: I know my phone is pretty lame lol
18:48:41   longuyen | d-_-b: not yet sure if we have to show subgraphs on the demo this Fri?
18:48:58   longuyen | jesusaurus: I don't understand how that helps for the subgraph. What is voronoi diagram?
18:49:37     @d-_-b | longuyen, https://projects.cecs.pdx.edu/news/117
18:49:47     @d-_-b | that's the notes from the sponsor feedback
18:49:48 jesusaurus | well, because the subgraphs arent connected, there will be no links
18:50:03     hptran | right
18:50:25     @d-_-b | longuyen, had you looked more at arrows?
18:50:31 jesusaurus | so, instead of having a bunch of circles, we can display the information with the voronoi
18:50:33     @d-_-b | maybe need some help?
18:50:43     hptran | Nitin confirmed with me about that, there is no links between subgraphs.
18:50:54 jesusaurus | where each subgraph would have a size related to the number of nodes in the subgraph
18:50:58   longuyen | d-_-b: it's a maybe
18:51:04     hptran | just suddenly meet him in the Intel lab.
18:51:21     hptran | jesusaurus: right
18:51:26   longuyen | hptran: I caught him there twice :))
18:51:32     hptran | :))
18:51:36   longuyen | d-_-b: not yet for the arrows
18:52:18     hptran | longuyen: direction is the important requirement, make sure you set your time to do it first
18:52:25     @d-_-b | longuyen, hptran, i can email matt/nitin tonight on their expectations for subgraphs by friday. it seemed like they mainly just wanted all real data on screen.
18:52:40       aren | d-_-b: fixed it: http://web.cecs.pdx.edu/~aren/site/
18:53:00     hptran | d-_-b: yes
18:53:21     @d-_-b | hptran, email them?
18:53:24     @d-_-b | aren, looking
18:53:36     hptran | for me the subgraph is just a node, when the user click the node, they will see all of the nodes in this subgraph
18:53:58     hptran | d-_-b: i think Nitin agreed in doing that
18:54:25     hptran | d-_-b: you can send email to Nitin/Matt so that both of them agree though
18:54:31 jesusaurus | hptran: that means having 320 nodes on the screen
18:54:40 jesusaurus | and one will be very big, the rest really small
18:54:53     hptran | right, but 320 nodes without links , just separated by charge
18:54:56     @d-_-b | hptran, alright
18:55:10     hptran | so, very light graph
18:55:37     @d-_-b | aren, looks great. i think there are weird cases where it doesn't keep the scale, but maybe i'm just good at breaking things :)
18:55:45   longuyen | hptran: we have to test across browser before we are sure about that
18:55:59 jesusaurus | im not saying we cant do it that way, i just want to explore better ways of representing the data
18:56:03     @d-_-b | hptran, jesusaurus, how big is the big subgraph you two are referencing?
18:56:10       aren | d-_-b, thats what we need. Yeah, going off the end seems to mess with it. More fiddling needed
18:56:44 jesusaurus | blackcat: how large was the json from running depth=10000 ?
18:56:52 jesusaurus | it crashed my laptop
18:56:57     hptran | :)
18:57:02   blackcat | it didn't show up
18:57:10   blackcat | I can't counr
18:57:13     @d-_-b | jesusaurus, it might be good to table the voronoi idea until friday when we get the sponsor feedback. no need for more work now.
18:57:13   blackcat | *count
18:57:38   blackcat | http://ox.cs.pdx.edu/jon/
18:57:43   blackcat | ^ you can try it
18:57:50     @d-_-b | jesusaurus, i agree that there may be a more intuitive way to show the subgraphs though
18:57:55   blackcat | I turn off php limit memory
18:59:13     hptran | so if anyone has idea for visualization, just mentions it to rendering group :)
18:59:36     @d-_-b | we've got about 30 miuntes left. the last structured thing i want to do is have everyone say what they'll work on to make the friday demo h
19:00:31       aren | I've got zoom where I like it for now, needs some tweeks, but auto complete will be my task
19:00:34     @d-_-b | i'm going to style the autosuggest search once it's in, adjust the progress bar updates, and include some real help while making the interface a bit cleaner
19:00:40          * | blackcat will work on phpUnit test since DB real is ready to use
19:00:56      BbBot | build #18 of Interface is complete: Success [build successful]  Build details are at http://capstone02.cs.pdx.edu/builders/Interface/builds/18
19:00:57 jesusaurus | i will be working on some php to create a json object representing the different subgraphs
19:01:44     @d-_-b | hptran, longuyen?
19:02:28     hptran | for us, we are ready with the shortestpath, and real data.
19:03:26     hptran | so, i will research on subgraphs.
19:03:38   longuyen | I;m going to work on performance and directionality
19:04:03     @d-_-b | do all of those tasks match up with fulfilling the demo's requirements?
19:04:26     @d-_-b | does anyone feel like the work is uneven and need a hand?
19:04:31   blackcat | jesusaurus: I alter username col from char(50) to varchar(50). Do I need to UPDATE username col again? or it will shink automatically
19:05:53   longuyen | blackcat: I don't think it will so you probably have to run the query
19:06:50 jesusaurus | blackcat: i dont know
19:07:21     @d-_-b | as far as i can see, those tasks everyone mentioned cover the work needed for the demo friday. can we shoot to be done thursday night? that way we've got friday to merge and we won't be rushed. :)
19:07:41       aren | Wednesday night is my plan
19:07:50     @d-_-b | aren, for sure
19:07:52     hptran | ok
19:08:07   blackcat | kk
19:08:20     @d-_-b | i'll ask again, does anyone feel like the work is uneven and need a hand?
19:08:30     @d-_-b | pm me if needed
19:08:52   longuyen | ok
19:09:46     @d-_-b | i realize everyone's got other classes, and are probably finishing up exams now, so keep me in the loop on your balance and stress levels.
19:09:57     hptran | 5130 is the maximum nodes in a subgraphs :|
19:10:13 jesusaurus | i took a nice long sauna last night, my stress has dropped significantly ;)
19:10:29     @d-_-b | jesusaurus, damn, i'm envious
19:10:32     @d-_-b | hptran, wow
19:10:41     hptran | ak ak
19:10:50     @d-_-b | i'm guessing it's due to 1 or 2 major nodes?
19:11:00 jesusaurus | blackcat: yeah, im getting an empty document too, somewhere between 2000/3000 nodes
19:11:17     hptran | yes, the other subgraphs just have about  2 nodes
19:11:31     @d-_-b | 2? really?
19:12:09     hptran | yes 2->10
19:12:29     hptran | very small, since we just have about 1000 nodes left from the large one
19:12:37     @d-_-b | hrm, this is an interesting challenge
19:12:45     hptran | right :|
19:12:51   blackcat | hptran: how many subgraphs in total?
19:12:57     hptran | 320
19:13:25   blackcat | sounds reasonable to me
19:13:31     @d-_-b | jesusaurus, longuyen, your take on the subgraph size?
19:13:58     @d-_-b | i guess it makes sense, considering it was a conference and there were probably just a few key people that put on the event.
19:13:59   longuyen | for the 5130 nodes, my suggestion is viewing the top 100 or 200 nodes base on their degrees
19:14:16   longuyen | which means we will remove all lower nodes and all links connected to them
19:14:46   longuyen | per zooming in, as some boundary nodes are aligned outside of the  canvas, we will view the lower nodes
19:14:53     @d-_-b | longuyen, so as a user, they might just see floating nodes that represent the most connected people
19:15:04   longuyen | anyway this approach is a difficult thing to do
19:15:20   longuyen | d-_-b: yes the most floating nodes
19:15:54   longuyen | because there are too many nodes so even if you show them all, the lower nodes are not visible either
19:16:06   longuyen | cuz they are overlapped by those bigger than them
19:16:16     @d-_-b | what about collapsing the smaller nodes inside of the larger ones, so on click or hover for instance, you could get stats.
19:16:44   longuyen | I say it's hard because 1. you have to keep track of what nodes are retained on the screen within the canvas when user zooms in. 2. where does the user zoom in?
19:17:06   longuyen | d-_-b: that sounds even more complicated
19:17:39     @d-_-b | longuyen, that brings up the issue that matt/nitin talked about with their demo. the funnel nodes between two popular nodes. depending on the directionality, they mentioned it was important
19:17:40   longuyen | because what if those lower nodes have links to other bigger nodes that don't belong to the large one they are staying within
19:17:48     @d-_-b | longuyen, probably
19:18:07     hptran | longuyen, I agree
19:18:16     @d-_-b | although each node in d3 stores an x and y relative to the svg element
19:18:42     @d-_-b | we could check that against the screen dimensions
19:19:27 jesusaurus | so, apparently in php, a segfault is a notice (as opposed to an error)
19:19:30   longuyen | 2. where the user zooms in can be accomblished by comparing the coordinate of their mouse point with all current nodes retained on the canvas
19:19:47   longuyen | 2. otherwise if they use the slider bar, we will just zoom in the center node of the canvas
19:19:54   blackcat | jesusaurus: longuyen : ALTER TABLE users ALTER COLUMN username TYPE char varying(50) USING rtrim(username)
19:19:56     @d-_-b | jesusaurus, interesting
19:20:08       aren | the zoom already is done by where the mouse is pointed unless by the slider
19:20:17       aren | built into d3
19:20:21     @d-_-b | aren, it does the center already, right?
19:20:37       aren | the slider is centered
19:20:37   longuyen | d-_-b: it doesn't if I scroll my mouse
19:20:52   longuyen | d-_-b: it zoom to where the mouse points
19:20:52       aren | the mouse scroll zoom is based on where the mouse is pointed
19:20:53      BbBot | build #9 of Data is complete: Success [build successful]  Build details are at http://capstone02.cs.pdx.edu/builders/Data/builds/9
19:20:54      BbBot | build #10 of Data is complete: Success [build successful]  Build details are at http://capstone02.cs.pdx.edu/builders/Data/builds/10
19:20:58     @d-_-b | longuyen, right, mouse translates to zoom on the point
19:21:54     @d-_-b | aren, didn't you mention a cool off period before checking the node's positions again?
19:22:15       aren | in terms of letting them settle, yes
19:22:45     @d-_-b | longuyen, we could wait until the user is done zooming based on a delay between function calls, then do the position checks on the nodes
19:23:56     @d-_-b | aren, couldn't we apply that same idea to zoom redraws?
19:23:58 jesusaurus | blackcat: great
19:24:08       aren | I would think so
19:24:41     @d-_-b | longuyen, what do you think?
19:25:06   longuyen | d-_-b: reading
19:25:58   longuyen | yeah
19:26:00     @d-_-b | so for instance, if the time after a zoom call is over a certain time, we know they're done moving, so trigger the redraw after that
19:26:18   longuyen | that's correct
19:26:37     @d-_-b | is this something that needs to be addressed by friday?
19:26:44   longuyen | d-_-b: yes
19:26:52   longuyen | d-_-b: let me put them into words
19:28:48   longuyen | zoomming in: essentially works as it is right now. But per certain level of zoom, we will redraw the graph which involves a new ajax call. i.e. we will get 200 more lower nodes surrounding a center node if we know for sure 200 other nodes were out of the screen
19:29:59     @d-_-b | would we need a new ajax call, or could we have all the data client side and just draw different ones at different levels?
19:29:59   longuyen | this method would cost Jon a new decent task which is, for a set S of nodes {a,b,c,d,e,...} being returned from json, the links array SHOULD ONLY contains links among those nodes
19:30:36     @d-_-b | it seems like the performance issues are due to the number of pixels on screen correct?
19:31:03   longuyen | d-_-b: we can do that, too. My only concern is how large should it be recommended for size of the JSON string
19:31:06     @d-_-b | by the way, meeting's done, but i'm sticking around. it's your choice
19:31:28     @d-_-b | longuyen, the size of json seems to be one of the biggest issues, for sure
19:32:15   longuyen | d-_-b: our graph should works in the same scheme with google map, at certain zoom level you can see the state name disappear and replaced by bunch of cities, for example
19:32:31     @d-_-b | longuyen, i get what you're saying
19:32:40   longuyen | d-_-b: cool
19:32:49     @d-_-b | i'm just wondering about the implementation
19:33:14     @d-_-b | both the ajax method you suggest and the selective drawing method i suggest would give the user the same experience, correct?
19:33:18   longuyen | d-_-b: yeah, cuz what I was trying to say is that, I believe Google redraw the map at certain zoom levels
19:33:34 jesusaurus | longuyen: how would i be receiving the set S of nodes?
19:33:39   longuyen | d-_-b: as also I was just talking about zoomming in, not sure yet how zoom out works in details
19:33:49   longuyen | jesusaurus: let me think
19:33:56     @d-_-b | longuyen, probably the opposite
19:35:21     @d-_-b | for my approach, i'm curious. jesusaurus, is there anyway to send off json as your search works, or do you need to wait until it finishes? maybe just split it and concat it on the client side? that may take care of this size issue that we have.
19:35:51     @d-_-b | i don't know if the formatting is dependent on a finished search though
19:35:59   longuyen | d-_-b: I don't think we can do that because we are not sure where to split the graph
19:36:12     hptran | jesusaurus: subgraphs table is ready, tablename: subgraphs, database name: real
19:36:19     @d-_-b | longuyen, we don't need to be.
19:36:42 jesusaurus | maybe...
19:36:47     @d-_-b | we just need to receive chunks in an order from jesusaurus, then concat them on the js end
19:37:09     @d-_-b | jesusaurus, as far as i know, it's nodes and links, right?
19:37:28     @d-_-b | is there an order, or is it just dependent on source/target?
19:38:00   longuyen | d-_-b: if I understand you correctly then we have to draw a partial piece of the graph per each chunk received. Then how would we incorporate the new chunk to the current graph when all current nodes are already arranged?
19:38:07     @d-_-b | longuyen, i'm saying we wait until all chunks are received, then put it back together. there are plenty of examples in d3 that work with json directly
19:38:26     @d-_-b | longuyen, we wouldn't draw until all the chunks arrive
19:38:30     @d-_-b | we'd wait
19:38:40     @d-_-b | that'd also help with the progress bar
19:38:47   longuyen | d-_-b: but if we wait, the time should be the same shouldn't it?
19:39:15     @d-_-b | longuyen, maybe, but we don't need to concern ourselves with the graph, just generic json
19:39:20 jesusaurus | d-_-b: i can output the nodes, then output the links
19:39:32 jesusaurus | but i would have to add some manual formatting
19:39:43 jesusaurus | and it would still be a single http response
19:39:44     hptran | d-_-b: if we can do it, and for each chunk we need to rerender the whole graph
19:39:59     @d-_-b | jesusaurus, the links are the main issue anyway.
19:40:03 jesusaurus | yeah
19:40:18     @d-_-b | hptran, i'm saying we wouldn't touch anything d3 related until we receive all the chunks
19:40:21 jesusaurus | i might be able to output them one at a time
19:40:34 jesusaurus | but that wouldnt change the size of the document
19:41:02     @d-_-b | so that brings up the question of memory on the client side
19:41:18     @d-_-b | jesusaurus, ah, good point
19:41:28     @d-_-b | i was approaching it as an issue of transmission
19:42:00     @d-_-b | jesusaurus, it's breadth first, right?
19:43:12 jesusaurus | yeah
19:43:20     @d-_-b | one crazy idea would be deleting the data expect for the current nodes after sending a chunk, then using the current nodes as new breadth first searches.
19:43:35     @d-_-b | jesusaurus, would that screw with the algorithm too much?
19:44:08     @d-_-b | because then you'd only need the nodes, so you might be able to dump the links progressively after each chunk.
19:44:27     @d-_-b | jesusaurus, this is of course an idea without understanding your code :)
19:44:49 jesusaurus | d-_-b: i cant delete anything
19:45:10 jesusaurus | because long wants a link object for every possible combination of nodes
19:45:11     @d-_-b | well that sucks
19:45:34     @d-_-b | jesusaurus, maybe you misunderstand
19:45:40 jesusaurus | well, i guess i could delete links after printing them
19:45:46 jesusaurus | just not the nodes
19:46:06     @d-_-b | the links i'd say to delete would be eating the memory on php and already sent in a json chunk to js
19:46:12     @d-_-b | that
19:46:18 jesusaurus | hmm
19:46:30     @d-_-b | would that free up enough memory you think?
19:46:42 jesusaurus | maybe
19:46:47 jesusaurus | i'll hack on that for a bit
19:46:48     @d-_-b | because each node and link has the memory in php and memory in json, right?
19:46:58     @d-_-b | that's twice for each
19:47:19 jesusaurus | so, the json and the php arent really seperate
19:47:37 jesusaurus | think of the json as a framing protocol
19:47:51 jesusaurus | the php object is packaged into json to be shipped over the wire
19:48:19     @d-_-b | does the php object hang around after being shipped right now?
19:48:26 jesusaurus | so, the php object is in memory on the server, the json object is in the http response
19:48:42 jesusaurus | right now im building the entire php object, then encoding into json
19:49:02     @d-_-b | entire php object meaning all the nodes and links?
19:49:19     @d-_-b | so it's a decoupled process. hm.
19:49:25 jesusaurus | but im going to make my prints more modular to free memory, and add prints for the outer json that is lost in transation
19:49:52     @d-_-b | jesusaurus, you understand the idea i have, correct? no idea if it'll work, of course.
19:50:23 jesusaurus | yeah, i understand what youre saying, and i think it'll work, but it'll take some manual glue for the json to be well formed
19:50:33     @d-_-b | so prints are what get php to json?
19:50:37     @d-_-b | alright
19:51:01 jesusaurus | i have a line of code like this: 'echo(json_encode($json))'
19:51:32 jesusaurus | where $json contains $json['nodes'] and $json['links']
19:51:40     @d-_-b | i understand
19:52:47 jesusaurus | so, yeah, i can echo $json['nodes'] before i start building $json['links']
19:53:34 jesusaurus | and i can echo each $json['links'] element seperately, but it will take some extra echo's in between
19:54:12   longuyen | d-_-b jesusaurus if you make 2 separate ajax calls, you would make 2 requests to db. And calling to db is always time consuming
19:54:42     @d-_-b | jesusaurus, and after each echo, there'd be the ability to free some portion of existing nodes/links in php during the algorithm?
19:54:50     @d-_-b | longuyen, that's true
19:55:33     @d-_-b | i guess that begs the question of what's better: multiple small requests or one big request?
20:00:33     @d-_-b | alright, i'm stepping out for a bit, but i don't plan on sleeping much. ping me if anything comes up.
